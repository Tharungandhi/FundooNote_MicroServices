package com.bridgelabz.fundoonotes.controller;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;

import com.bridgelabz.fundoonotes.model.UserDetails;
import com.bridgelabz.fundoonotes.service.UserService;


@Controller
@RequestMapping("/user/")
public class UserController
{
     @Autowired 
        private UserService userService;  
     
     @PostMapping(value = "/register")
        public ResponseEntity<?> register(@RequestBody UserDetails user,HttpServletRequest request) {

            UserDetails newUser = userService.register(user,request);
            if (newUser != null) {
                return new ResponseEntity<UserDetails>(newUser, HttpStatus.FOUND);
            } else {
                return new ResponseEntity<String>("Not created", HttpStatus.NOT_FOUND);
            }
        }
     
     
     @GetMapping(value="activationstatus/{token:.+}")
     public ResponseEntity<String> activateUser(@PathVariable String token, HttpServletRequest request) {

     UserDetails user = userService.activateUser(token, request);

     if (user != null) {

     return new ResponseEntity<String>("User has been activated successfully", HttpStatus.FOUND);
     }
     else {

     return new ResponseEntity<String>("Email incorrect. Please enter valid email address present in database",
     HttpStatus.NOT_FOUND);
     }
   }
     
     @RequestMapping(value = "/login")
     public ResponseEntity<?> login( @RequestBody UserDetails user,HttpServletRequest request,HttpServletResponse response) {
 		try {
         UserDetails userDetails = userService.login(user,request,response);
         if(userDetails!= null) 
             return new ResponseEntity<UserDetails>(userDetails, HttpStatus.FOUND);
        
     }catch (Exception e) {
 		e.printStackTrace();
         return new ResponseEntity<String>("Dinied In Logging",HttpStatus.NOT_FOUND);
 	}
 		return new ResponseEntity<String>("Pls provide details correctly",HttpStatus.CONFLICT);
 	}
     
     
     
}
